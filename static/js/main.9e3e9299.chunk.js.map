{"version":3,"sources":["components/core.js","components/contact.js","components/languages.js","components/infoContainer.js","components/toolsContainer.js","App.js","serviceWorker.js","index.js"],"names":["Core","Contact","className","href","target","src","lang_en","tools","InfoContainer","state","myLang","React","Component","ToolsContainer","newTools","map","element","console","log","App","Helmet","bodyAttributes","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2OAeeA,MAZf,WACI,OACI,6BACI,gCACI,kEACA,gDACA,wDCcDC,MApBf,WACI,OACI,yBAAKC,UAAU,QACX,mDACA,uBAAGA,UAAU,aAAb,4BACA,8BACI,uBAAGC,KAAK,wCAAwCC,OAAO,UACnD,yBAAKF,UAAU,QAAQG,IAAI,wBAGnC,6BACA,8BACI,uBAAGF,KAAK,8BAA8BC,OAAO,UACzC,yBAAKF,UAAU,QAAQG,IAAI,wB,4BChBlCC,EAEH,6GAKGC,EAAQ,CACjB,WACA,SACA,QACA,qBACA,sBACA,wBACA,6BACA,4DCWWC,E,kDApBX,aAAe,IAAD,8BAEV,gBACKC,MAAQ,CACTC,OAAQ,WAJF,E,qDAUV,OACI,yBAAKR,UAAU,QACX,2BACKI,Q,GAfOK,IAAMC,WCuBnBC,E,kDAtBX,aAAe,wC,qDAMX,IAAMC,EAAWP,EAAMQ,KAAI,SAACC,GAExB,OADAC,QAAQC,IAAIF,GACL,4BAAKA,MAGhB,OACI,yBAAKd,UAAU,QACX,qCACA,4BACKY,Q,GAjBQH,IAAMC,WCmBpBO,MAdf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAACkB,EAAA,EAAD,CAAQC,eAAgB,CAACC,MAAO,+BAC9B,oDAEF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.9e3e9299.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Core() {\n    return(\n        <div>\n            <header>\n                <h2>Mario Alberto Briseño Zamarripa</h2>\n                <p>Software Engineer</p>\n                <p>B.Eng. in Mechatronics</p>\n            </header>\n        </div>\n    )\n}\n\nexport default Core;\n","import React from \"react\"\n\n\nfunction Contact() {\n    return(\n        <div className=\"card\">\n            <h3>Contact Information</h3>\n            <p className=\"card-info\">mario.briseno7@gmail.com</p>\n            <span>\n                <a href=\"https://www.linkedin.com/in/m7a7b7z7/\" target=\"_blank\">\n                    <img className=\"logos\" src=\"LinkedIn_Logo.svg\" />\n                </a>\n            </span>\n            <br/>\n            <span>\n                <a href=\"https://github.com/marioabz\" target=\"_blank\">\n                    <img className=\"logos\" src=\"GitHub_Logo.png\" />\n                </a>\n            </span>\n        </div>\n    )\n}\n\nexport default Contact","export const lang_en = {\n    career: \"Software Engineer\",\n    info: \"As a self-taught software engineer Mario has over 3 years of experience working with backend technologies.\"\n}\nexport const lang_esp = \"\"\nexport const lang_chin = \"\"\n\nexport const tools = [\n    \"Python 3\",\n    \"NodeJS\",\n    \"Redis\",\n    \"Bitcoin Blockchain\",\n    \"Ethereum Blockchain\",\n    \"Django Rest Framework\",\n    \"MySQL, PosgreSQL, DynamoDB\",\n    \"AWS tools (EC2, EBS, RDS, S3, Lambdas, API Gateway, VPC)\"\n]\n","import React from \"react\"\nimport { lang_en } from \"./languages.js\"\n\n\nclass InfoContainer extends React.Component {\n\n    constructor() {\n\n        super()\n        this.state = {\n            myLang: \"lang_en\"\n        }\n    }\n\n    render() {\n\n        return(\n            <div className=\"Info\">\n                <p>\n                    {lang_en.info}\n                </p>\n            </div>\n        )\n    }\n}\n\nexport default InfoContainer","import React from \"react\"\nimport { tools } from \"./languages.js\"\n\nclass ToolsContainer extends React.Component {\n\n    constructor() {\n        super()\n    }\n\n    render() {\n\n        const newTools = tools.map((element) => {\n            console.log(element)\n            return <li>{element}</li>\n        })\n\n        return(\n            <div className=\"List\">\n                <h3>Tools</h3>\n                <ul>\n                    {newTools}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default ToolsContainer\n","import './style/App.css';\nimport React from 'react';\nimport {Helmet} from \"react-helmet\"\nimport Core from './components/core.js';\nimport Contact from \"./components/contact.js\"\nimport InfoContainer from \"./components/infoContainer.js\"\nimport ToolsContainer from \"./components/toolsContainer.js\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet bodyAttributes={{style: 'background-color : #f4f8fc'}}>\n        <title>Mario Briseño</title>\n      </Helmet>\n      <Core />\n      <InfoContainer />\n      <ToolsContainer />\n      <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}